/*=============================
연산자(operator)
-비트 단위 연산자 
- 비트 Shift 연산 『 』_ 제일 빠르다
==============================*/

public class Test023
{
	public static void main (String[] args)
	{
		int x =128;			

		System.out.printf("x << 3 : %d\n", x<<3);	// 00000000 00000000 00000000 10000000
		System.out.printf("x * 8 : %d\n",x*8);		// 00000000 00000000 00000100 00000000
		
		/*
		x << 3 : 1024
		x * 8 : 1024
		계속하려면 아무 키나 누르십시오 . . .*/

		System.out.printf("x >> 3 : %d\n", x>>3);	// 00000000 00000000 00000000 10000000
		System.out.printf("x / 3 : %d\n", x/8);		// 00000000 00000000 00000000 00010000
		/*
		x >> 3 : 16
		x / 3 : 16
		계속하려면 아무 키나 누르십시오 . . .*/

		
		
		// (>>)  :2개는 비트열 이동 시 빈 자리에 양수 일때는 0, 음수 일떄는 1 ==> 부호유지
		// (>>>) :3개는 비트열 이동 시 빈 자리에 0                     
	
		System.out.printf("x << 24 : %d\n", x<<24);
		// 결과 x << 24 : -2147483648
		// 10000000 00000000 00000000 00000000

		/*만약에 25칸 왼쪽으로 이동 하라고 했을때
		00000000 00000000 00000000 00000001 하지만 → 0
		32칸을 이동 했을 때
		00000000 00000000 00000000 0000000 → 자기 자리를 찾았기에 128 */

		System.out.printf("x << 25 : %d\n", x<<25); // 0
		System.out.printf("x << 26 : %d\n", x<<26); // 0
		System.out.printf("x << 31 : %d\n", x<<31); // 0
		System.out.printf("x << 32 : %d\n", x<<32); // 128
		/*
		x << 25 : 0
		x << 26 : 0
		x << 31 : 0
		x << 32 : 128
		계속하려면 아무 키나 누르십시오 . . .*/


	}
}
