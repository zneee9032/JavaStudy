/*=========================================================
	■■■배열■■■
-배열 선언과 초기화  ☆동질의 타입/ 배열의 길이 변경 불가☆    
===========================================================*/  
/*※ 배열의 개요                                                         

   1. 배열이란 크기와 성격이 같은 일련의 원소들이 모여

      공동의 집합 구조를 갖는 자료의 집합체를 의미하는 것으로

	  『동질적인 성격을 가진 자료들』에 대해 개별적으로 자료형(Data Type)을

	  부여하지 않고 하나의 이름을 가지고 일괄적으로 처리할 목적으로 사용된다.


   2. 자바에서의 배열은 다음과 같은 순서에 의해 사용된다.

      배열선언(선점) → 배열의 메모리 할당(방 몇개 짜리로 할 것 인지) → 배열 요소의 사용


   3. 형식 및 구조

      자료형[] 변수명;

	  변수명 = new 자료형[요소크기]

	  변수명[인덱스] = 값;


	  int[] arr;								// []사용은 int들로 만들어진 arr이름의 방을 만들거야, (선언)

	  arr = new int[3];							// arr이름으로 나 방 3개짜리 쓸거야	,(할당)					//int[] arr = new int[3]; 가능(0)

	  arr[0] = 10;								// 0번 방에 10 담을게 ,(사용)

	  arr[1] = 20;								// 1번 방에 20 담을게 ,(사용)

	  arr[2] = 30;								//	2번 방에 30 담을게,(사용)


// 길이 불변, 배열 길이 재선언시 변화하는 것이 아닌 메모리할당 재선언
*/
public class Test074

{
	public static void main(String[] args) //main변수의 매개변수는 한 개, 문자열을 담을 수 있는 배열

	{

		// 배열 선언

		int[] arr;		// = int arr[];		int들을 담아 놓는 arr


		// int배열의 메모리 할당

		arr = new int[10];						// 이어진 방10개 주세요 

		// 배열은 다음과 같이 선언과 동시에

		// 메모리 할당 및 초기화가 가능하다.

		int[] arr2 = new int[10];				// int[] arr2 = {0, 0 ,0 ,0, 0, 0, 0, 0, 0, 0, };

		int[] arr3 = {1,2,3,4,5,6,7,8,9,0};		// 10개 방을 준비 했으니 들어갔으니 계산해주세요

		int arr4[] = {1,2,3,4,5,6,7,8,9,0};		// 10개 방을 준비 했으니 들어갔으니 계산해주세요


		// 배열 요소 사용(접근)

		arr[0] = 1;

		arr[1] = 2;

		arr[2] = 3;

		// ※ 값을 할당하지 않은 나머지 배열 공간은

		//    자동으로 초기화 된다. → 0 (int 형 배열)
		

		System.out.println("arr : " + arr);

		//--==>> arr : [I@6d06d69c

		//-- 배열을 출력하기 위해 배열명을 일반 변수처럼 사용하여 출력하는

		//   구문으로 작성하게 되면 배열의 각 방에 들어 있는 데이터가 출력되는 것이 아니라

		//   우리가 알아볼 수 없는 코드가 출력된다. 그리고 이 코드는 메모리의 주소값이 아니다.
		// (자바는 메모리 주소 값에 사용자가 직접 접근하는 것을 허용하지 않기 때문에..)


		// 배열에 담긴 데이터(요소)의 값 출력(접근)

		System.out.println("arr[0] : " + arr[0]);

		//--==>> arr[0] : 1


		System.out.println("arr[1] : " + arr[1]);

		//--==>> arr[1] : 2


		System.out.println("arr[2] : " + arr[2]);

		//--==>> arr[2] : 3


		System.out.println("arr[3] : " + arr[3]);

		//--==>> arr[3] : 0


		System.out.println(arr[0] + " " + arr[1] + " " + arr[2] + " " + arr[3] + " " + arr[4] + " "+ arr[5] +" "+ arr[6] + " " + arr[7] + " " + arr[8] + " " + arr[9]);

		//==>1 2 3 0 0 0 0 0 0 0


		// 반복문을 활용하여 배열에 담긴 데이터 전체 출력

		for (int i=0; i<10; i++)		//i => 0 1 2 3 4 5 6 7 8 9 

		{
			
			//테스트
			//System.out.println("i : " + i);
			//==>i : 0
				/*
				i : 1
				i : 2
				i : 3
				i : 4
				i : 5
				i : 6
				i : 7
				i : 8
				i : 9
				*/

			//System.out.printf("%2d", arr[i]);

			//--==>>  1 2 3 0 0 0 0 0 0 0

			System.out.printf("arr 배열의 %d번째 방 : %2d\n", i, arr[i]);

		}

		System.out.println();

	}

}
/*arr : [I@15db9742
arr[0] : 1
arr[1] : 2
arr[2] : 3
arr[3] : 0
1 2 3 0 0 0 0 0 0 0
arr 배열의 0번째 방 :  1
arr 배열의 1번째 방 :  2
arr 배열의 2번째 방 :  3
arr 배열의 3번째 방 :  0
arr 배열의 4번째 방 :  0
arr 배열의 5번째 방 :  0
arr 배열의 6번째 방 :  0
arr 배열의 7번째 방 :  0
arr 배열의 8번째 방 :  0
arr 배열의 9번째 방 :  0

계속하려면 아무 키나 누르십시오 . . .*/